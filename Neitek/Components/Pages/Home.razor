@page "/"
@using Neitek.services.Metas

@inject IMetaService MetaService
@inject ITareaService TareaService
<style>
    .c {
        background-color: white;
    }

    .btnColor {
        background-color: #336666;
        color: white;
    }

    progress {
        border: none;
        width: 400px;
        height: 10px;
        background: crimson;
    }

    progress {
        color: lightblue;
    }

        progress::-webkit-progress-value {
            background: lightblue;
        }

        progress::-moz-progress-bar {
            background: lightblue;
        }

    .mano {
        cursor: pointer;
    }
    img{
        width: 20px;
        height: 20px;
    
    }
</style>

<PageTitle>Home</PageTitle>

<!-- Modals Meta-->
<div class="modal fade" id="MetaModal" tabindex="-1" aria-labelledby="MetaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header btnColor">
                <h5 class="modal-title" id="MetaModalLabel">@action Meta</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="col-md-6">
                    <label for="nombre" class="form-label">Nombre</label>
                    <input type="text" maxlength="80" class="form-control" id="nombre" @bind-value="meta.Nombre" required>
                    <div class="invalid-feedback">
                        Por favor añada un nombre a la tarea.
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SaveMeta">Guardar</button>
            </div>
        </div>
    </div>
</div>

<!--Modals Tareas-->
<div class="modal fade" id="TareaModal" tabindex="-1" aria-labelledby="TareaModalLabel" aria-hidden="true">
  <div class="modal-dialog">
      <div class="modal-content">
          <div class="modal-header btnColor">
              <h5 class="modal-title" id="TareaModalLabel">@action Tarea</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <div class="col-md-6">
                  <label for="nombre" class="form-label">Nombre</label>
                  <input type="text" maxlength="80" class="form-control" id="nombre" @bind-value="tarea.NombreTarea" required>
                  <div class="invalid-feedback">
                      Por favor añada un nombre a la tarea.
                  </div>
              </div>
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
              <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SaveTarea">Guardar</button>
          </div>
      </div>
  </div>
</div>

<!--Modal validation-->
<div class="modal fade show" id="ValidationModal" tabindex="-1" aria-labelledby="ValidationModalLabel" style="display: @showValidation;" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header btnColor">
                <h5 class="modal-title" id="MetaModalLabel">Atencion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @validationMessage
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="hiddenModalValidation" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>



<div class="row">
    <div class="top-row c mt-2 mb-2">
        <h4>
            <strong>Control metas</strong>
        </h4>
    </div>
    <article class="content col col-4 c mr">
        @if (MetasList.Count() == 0)
        {
            <strong>No se han creado metas...</strong>
        }
        else
        {
            <butto type="button" class="btn btnColor mb-4" data-bs-toggle="modal" @onclick="AddMeta" data-bs-target="#MetaModal">Nueva Meta</butto>
            <table>
                <tbody>

                    @foreach (var item in MetasList)
                    {
                        <tr>
                            <td class="mano" @onclick="(args)=>GetTareasByMetaID(args,item.PkMeta)"><strong>@item.Nombre</strong></td>
                            <td>
                                <button data-bs-toggle="modal" data-bs-target="#MetaModal" @onclick="((args) => OnEditMeta(args, item))">Edit</button>
                                <button @onclick="((args)=>OnDeleteMeta(args,item.PkMeta))">Delete</button>
                            </td>
                        </tr
                        <tr>
                            <td>@item.FechaCreacion.ToShortDateString()</td>
                        </tr>
                            <tr>
                                <td>Tareas completadas @item.Completas / @item.TotalTareasByMeta</td>
                                <td></td>
                                <td>@Math.Round(@item.Porcentaje, 1) %</td>
                            </tr>
                            <tr>
                                <td colspan="3"><progress value="@item.Porcentaje" max="100" style="--value: @item.Porcentaje; --max: 100; width:100%" /></td>
                            </tr>
                    }
                    </tbody>
                </table>
        }
    </article>

<article class="col col-1"></article>
<article class="content px-4 col col-7 ml c">
    <div class="row">
        <div class="col col-3 mb-4">
            <button data-bs-target="#TareaModal" data-bs-toggle="modal" @onclick="AddTarea" class="btn btnColor">Agreagar tarea</button>
        </div>
            <div class="col col-3 mb-4">
            <button style="visibility:@showCompletar" class="btn btnColor">Completar tarea</button>
        </div>
        <div class="col col-3 mb-4">
            <button data-bs-target="#TareaModal" style="visibility:@showEditar" @onclick="OnEditTarea" data-bs-toggle="modal" class="btn btnColor">Editar tarea</button>
        </div>
        <div class="col col-3 mb-4">
            <button style="visibility:@showEliminar" class="btn btnColor">Eliminar tarea</button>
        </div>
        @if (TareasList==null || TareasList.Count()==0)
            {
                <strong>Aun no tienes tareas asignadas para esta meta</strong>
            }
            else
            {
                
            <table class="col col-12">
                <thead>
                    <tr>
                        <th data-field="pkTarea" hidden></th>
                        <th>
                            <input @onclick="SelectAll" type="checkbox" />
                        </th>
                        <th data-field=""></th>
                        <th >
                            <div class="row px-3">
                                <span>Nombre</span>
                                <input title="Presiona tab para buscar"  placeholder="Ingrea un nombre para buascar y presiona tab" @onchange="ChangeNombreSearch" type="text"/>
                            </div>
                        </th>
                        <th >
                         <div class="row px-3">
                             <span>Fecha Creacion</span>
                             <input  @onchange="ChangeFechaCreacionSearch" type="date"/>
                         </div>
                        </th>
                        <th >
                            <div class="row px-3">
                                    <span>Estado</span>
                                <select @onchange="ChangeEstado">
                                    <option value="-1">Select option</option>
                                    <option value="0">Abierta</option>
                                    <option value="1">Completada</option></select>
                            </div>
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var tarea in TareasPage)
                    {
                        <tr>
                            <td hidden>@tarea.PkTarea</td>
                            <td>
                                <input type="checkbox" @bind="tarea.Selected"  @onclick="(args)=>AddToSelectedList(args,tarea)" />
                            </td>
                            <td>
                                @if(@tarea.Importante)
                                {
                                    <img alt="@tarea.Importante" src="Assets/img/star-True.png"/>
                                }
                                else
                                {
                                    <img alt="@tarea.Importante" src="Assets/img/star-False.png"/>
                                }
                            </td>
                            
                            <td>@tarea.NombreTarea</td>
                            <td>@tarea.FechaCreacion.ToShortDateString()</td>
                            @if(@tarea.Completada)
                            {
                                <td>Completada</td>
                            }
                            else
                            {
                                <td>Abierta</td>
                            }
                        </tr>
                    }
                        </tbody>

            </table>
            <div class="row">
  <ul class="pagination">
    @for (int i = 1; i <= totalPage; i++)
                        {
                            var j = i;
                            <li @onclick="(args)=>GetMetasByPage(args,j)" class="page-item"><span class="page-link" >@i</span></li>
                        }
  </ul>
                </div>
            }
    </div>

</article>
</div>
@code {
    private List<MetasView>? MetasList;
    private List<TareaViewModel>? TareasList;
    private List<TareaViewModel>? TareasPage;
    private List<TareaViewModel>? TareasListSelected;
    private Meta meta = new Meta();
    private TareaViewModel tarea = new TareaViewModel();
    private string action = "";
    private string showValidation = "none";
    private string validationMessage = "";
    private string tareasJson = "";
    private bool selectAll = false;
    private int itemsPerPage = 5;
    private int totalPage;
    private MetasView metaSelected;

    private string showEditar = "hidden";
    private string showCompletar = "hidden";
    private string showEliminar = "hidden";


    private string NombreSearch = "";
    private string FechaCreacionSearch = "";
    private bool EstadoSearch;

    #region Metas

    protected override void OnInitialized()
    {
        LoadMetas();
        base.OnInitialized();
    }

    private void LoadMetas()
    {
        MetasList = new List<MetasView>();
        MetasList = MetaService.GetMetas().Result;
        TareasListSelected = new List<TareaViewModel>();

    }

    private void hiddenModalValidation() =>
        showValidation = "none";

    private void AddMeta()
    {
        action = "Add";
    }

    protected void OnEditMeta(EventArgs args, MetasView e)
    {
        action = "Edit";
        meta.PkMeta = e.PkMeta;
        meta.Nombre = e.Nombre;
    }
    private void SaveMeta()
    {
        if (MetasList.Exists(p => p.Nombre == meta.Nombre))
        {
            validationMessage = $"La meta {meta.Nombre} ya existe, por favor añada un nombre diferente.";
            showValidation = "block";
            meta = new Meta();
            return;
        }
        if (string.IsNullOrEmpty(meta.Nombre))
        {
            validationMessage = $"Por favor añada un nombre a la meta.";
            showValidation = "block";
            return;
        }
        if (action == "Add")
        {

            MetaService.CreateMeta(meta);
        }
        else
        {
            MetaService.UpdateMeta(meta);
        }
        meta = new Meta();
        LoadMetas();
    }


    private void OnDeleteMeta(EventArgs args, int id)
    {
        MetaService.DeleteMeta(id);
        LoadMetas();
    }

    #endregion Metas

    #region Tareas
    private void GetTareasByMetaID(EventArgs eventArgs, int idMeta)
    {
        metaSelected = MetasList.Find(p => p.PkMeta == idMeta);
        totalPage = (int)Math.Ceiling((double)metaSelected.TotalTareasByMeta / itemsPerPage);
        TareasList = TareaService.GetTareasByFkMeta(idMeta);
        GetMetasByPage(null,1);
    }

    private void AddTarea()
    {
        action = "Add";
    }

    protected void OnEditTarea()
    {
        action = "Edit";
        tarea.PkTarea = TareasListSelected[0].PkTarea;
        tarea.NombreTarea = TareasListSelected[0].NombreTarea;
        tarea.Completada = TareasListSelected[0].Completada;
        tarea.Importante = TareasListSelected[0].Importante;
        tarea.FechaCreacion = TareasListSelected[0].FechaCreacion;
        tarea.FkMeta = TareasListSelected[0].FkMeta;
    }
    private void SaveTarea()
    {
        if (TareasList.Exists(p => p.NombreTarea == tarea.NombreTarea))
        {
            validationMessage = $"La tarea {meta.Nombre} ya existe, por favor añada un nombre diferente.";
            showValidation = "block";
            tarea = new TareaViewModel();
            return;
        }
        if (string.IsNullOrEmpty(tarea.NombreTarea))
        {
            validationMessage = $"Por favor añada un nombre a la tarea.";
            showValidation = "block";
            return;
        }
        if (action == "Add")
        {
            tarea.FkMeta = metaSelected.PkMeta;
            tarea.FkMetaNavigation =new Meta
            {
                PkMeta = metaSelected.PkMeta,
                Nombre = metaSelected.Nombre,
                FechaCreacion = metaSelected.FechaCreacion
            };
            TareaService.CreateTarea(tarea as Tarea);
        }
        else
        {
            tarea.FkMetaNavigation = new Meta
            {
                PkMeta = metaSelected.PkMeta,
                Nombre = metaSelected.Nombre,
                FechaCreacion = metaSelected.FechaCreacion
            };
            TareaService.UpdateTarea((Tarea)tarea);
        }
        tarea = new ();
        GetTareasByMetaID(null,metaSelected.PkMeta);
    }




    private void AddToSelectedList(EventArgs eventArgs, TareaViewModel tarea)
    {
        if (TareasListSelected.Exists(t => t.PkTarea == tarea.PkTarea))
        {
            TareasListSelected.Remove(tarea);
        }
        else
        {
        TareasListSelected.Add(tarea);
        }
        showCompletar = showEliminar = TareasListSelected.Count>1?"visible":"hidden";
        showEditar= (TareasListSelected.Count>=1 || TareasListSelected.Count!=0) && TareasListSelected.Count<2 ?"visible":"hidden";
    }

    private void SelectAll()
    {
        selectAll = !selectAll;

        TareasListSelected.Clear();

        if (selectAll)
        {
            showCompletar = "visible";
            showEliminar = "visible";
            foreach (var tarea in TareasList)
            {
                tarea.Selected = selectAll;
                TareasListSelected.Add(tarea);
            }
        }
        else
        {
             showCompletar = "hidden";
            showEliminar = "hidden";
        foreach (var tarea in TareasList)
            {
                tarea.Selected = selectAll;
            }
        }


    }

    private void GetMetasByPage(EventArgs eventArgs, int page)
    {
        TareasPage = TareasList.Skip((page - 1) * itemsPerPage).Take(itemsPerPage).ToList();
    }

    private void ChangeEstado(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "-1")
            return;
        EstadoSearch = e.Value.ToString()=="1"?true:false;
         TareasList = TareaService.GetTareasByFkMeta(metaSelected.PkMeta).Where(p => p.Completada == EstadoSearch).ToList();
        totalPage = (int)Math.Ceiling((double)TareasList.Count() / itemsPerPage);
        GetMetasByPage(null, 1);
    }

    public void ChangeNombreSearch(ChangeEventArgs e)
    {
        NombreSearch = e.Value.ToString();
        TareasList = TareaService.GetTareasByFkMeta(metaSelected.PkMeta).Where(p => p.NombreTarea.Contains(NombreSearch)).ToList();
        totalPage = (int)Math.Ceiling((double)TareasList.Count() / itemsPerPage);
        GetMetasByPage(null, 1);
    }

    public void ChangeFechaCreacionSearch(ChangeEventArgs e)
    {
        FechaCreacionSearch = e.Value.ToString();
        TareasList = TareaService.GetTareasByFkMeta(metaSelected.PkMeta).Where(p => p.FechaCreacion.ToString("yyyy-MM-dd")==FechaCreacionSearch).ToList();
        totalPage = (int)Math.Ceiling((double)TareasList.Count() / itemsPerPage);
        GetMetasByPage(null, 1);
    }
    #endregion

}